Unit UAuthCriteria;

Interface

Uses
    MVCFramework,
    System.Generics.Collections;

Type
    TAuthCriteria = Class(TInterfacedObject, IMVCAuthenticationHandler)
    Public
        Procedure OnRequest(const AContext: TWebContext; const AControllerQualifiedClassName,
         AActionName: string; var AAuthenticationRequired: Boolean);
        Procedure OnAuthentication(const AContext: TWebContext; const AUserName, APassword: string;
         AUserRoles: TList<string>; var AIsValid: Boolean;
         const ASessionData: TDictionary<string, string>);
        Procedure OnAuthorization(const AContext: TWebContext; AUserRoles: TList<string>;
          const AControllerQualifiedClassName: string; const AActionName: string;
          var AIsAuthorized: Boolean);
    End;

Implementation

Uses
    System.SysUtils,
    System.StrUtils,
    System.NetEncoding,
    WebModule.SalamtCRM,
    MVCFramework.ActiveRecord,
    MVCFramework.Logger,
    Model.User,
    Cashe.UserRole;

{ TAuthCriteria }

//________________________________________________________________________________________
Procedure TAuthCriteria.OnAuthentication(const AContext: TWebContext; Const AUserName,
  APassword: String; AUserRoles: TList<string>; var AIsValid: Boolean;
  const ASessionData: TDictionary<string, string>);
Var
    LUser: TUser;
    LPassword, LSalt, LHashedPassword: String;
Begin
    AIsValid := False;
    LUser := TMVCActiveRecord.GetOneByWhere<TUser>(
      'username = ? and isactive=1', [AUserName], True);
    Try
        If Assigned(LUser) then
        Begin
            LHashedPassword := HashPassword(
                TNetEncoding.Base64.EncodeBytesToString(
                  TEncoding.UTF8.GetBytes(APassword) +
                  TNetEncoding.Base64.DecodeStringToBytes(LUser.Salt)
                )
            );
            If SameStr(LHashedPassword, LUser.PasswordHash) then
            Begin
                AIsValid := True;

                // نقش را از دیکشنری بگیر
                AUserRoles.Add(GetRoleNameByID(LUser.UserRoleID.ValueOrDefault));

                ASessionData.AddOrSetValue('userid', LUser.ID.ToString);
                ASessionData.AddOrSetValue('role', LUser.UserRoleID.GetValue.ToString);
            End;
        End;
    Finally
        LUser.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TAuthCriteria.OnAuthorization(const AContext: TWebContext;
    AUserRoles: TList<string>; const AControllerQualifiedClassName, AActionName: string;
    var AIsAuthorized: Boolean);
Begin
    AIsAuthorized := True;
End;
//________________________________________________________________________________________
Procedure TAuthCriteria.OnRequest(const AContext: TWebContext;
  const AControllerQualifiedClassName, AActionName: string;
  var AAuthenticationRequired: Boolean);
Begin
    if AContext.Request.PathInfo.StartsWith('/api/login', True) then
    Begin
        AAuthenticationRequired := False
    End
    Else if AContext.Request.PathInfo.StartsWith('/logooff', True) then
    Begin
        AAuthenticationRequired := False
    End
    Else if AContext.Request.PathInfo.StartsWith('/api/v1/user', True) AND (AActionName = 'AddUser') then
    Begin
        AAuthenticationRequired := False
    End
    else
    Begin
        AAuthenticationRequired := True;
    End;
End;
//________________________________________________________________________________________

End.
