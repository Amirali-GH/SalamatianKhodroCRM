Unit Service.UploadImage;

Interface

Uses
    System.SysUtils,
    System.Classes,
    System.Generics.Collections,
    MVCFramework.ActiveRecord,
    FireDAC.Comp.Client,
    Web.ReqFiles,
    Service.Interfaces;

Type
    TImageUploadService = Class(TInterfacedObject, IImageUploadService)
    Public
        Function SaveUploadedImages(Const AFiles: TWebRequestFiles; Const AUserID: String): Boolean;
    End;

Implementation

Uses
    System.IOUtils,
    System.DateUtils,
    System.Math,
    System.StrUtils,
    MVCFramework.Logger,
    FireDac.Stan.Param,
    Data.DB,
    Graphics;

{ TImageUploadService }

//________________________________________________________________________________________
Function TImageUploadService.SaveUploadedImages(
    Const AFiles: TWebRequestFiles; Const AUserID: String): Boolean;
Var
    i, j, k: Integer;
    LConn: TFDConnection;
    LQuery: TFDQuery;
    LAssignQuery: TFDQuery;
    LGUIDFolder, LBaseUploadsDir, LThisFolder: String;
    LTempFiles: TStringList;
    LUploadedIDs: TList<Int64>;
    LBranchIDs: TList<Int64>;
    LMem: TMemoryStream;
    LFileSizeKB: Integer;
    LOrigName, LContentType: String;
    LImagePhoneID: Int64;

    LBitmap: TBitmap;
    LWidth, LHeight: Integer;

    Function GetLastInsertID: Int64;
    Begin
        // این تابع برای MySQL نوشته شده است.
        LQuery.SQL.Text := 'SELECT LAST_INSERT_ID() AS id';
        LQuery.Open;
        Try
            Result := LQuery.FieldByName('id').AsLargeInt;
        Finally
            LQuery.Close;
        End;
    End;

Begin
    Result := False;

    If (AFiles = Nil) Or (AFiles.Count = 0) Then
        Exit;

    // مسیر ذخیره کنار exe: /uploads/{GUID}/
    LBaseUploadsDir := TPath.Combine(ExtractFilePath(ParamStr(0)), 'uploads');
    If Not TDirectory.Exists(LBaseUploadsDir) Then
    Begin
        TDirectory.CreateDirectory(LBaseUploadsDir);
    End;

    LGUIDFolder := TGUID.NewGuid.ToString;
    LThisFolder := TPath.Combine(LBaseUploadsDir, LGUIDFolder);
    ForceDirectories(LThisFolder);

    LTempFiles := TStringList.Create;
    LUploadedIDs := TList<Int64>.Create;
    LBranchIDs := TList<Int64>.Create;
    LQuery := TFDQuery.Create(Nil);
    LAssignQuery := Nil;
    LMem := Nil;
    LBitmap := Nil;

    Try
        Try
            LConn := TMVCActiveRecord.CurrentConnection As TFDConnection;
            If LConn = Nil Then
                Raise Exception.Create('ارتباط با دیتابیس برقرار نیست');

            LConn.StartTransaction;

            // حلقه روی فایل‌های دریافتی
            For i := 0 To AFiles.Count - 1 Do
            Begin
                // فرض: AFiles.Items[i].FileName و .ContentType و .Stream موجود است
                LOrigName := AFiles.Items[i].FileName;
                LContentType := AFiles.Items[i].ContentType;

                LMem := TMemoryStream.Create;
                Try
                    // *** اصلاح شده: فقط از Stream استفاده می‌کنیم ***
                    If Assigned(AFiles.Items[i].Stream) Then
                    Begin
                        AFiles.Items[i].Stream.Position := 0;
                        LMem.CopyFrom(AFiles.Items[i].Stream, AFiles.Items[i].Stream.Size);
                    End
                    Else
                    Begin
                        // در صورت عدم وجود استریم، خطا ده
                        Raise Exception.Create('قابلیت خواندن استریم فایل پشتیبانی نمی‌شود');
                    End;

                    // ذخیره روی دیسک (نام اصلی فایل - در صورت نیاز می‌توان با GUID ذخیره کرد)
                    LMem.Position := 0;
                    LMem.SaveToFile(TPath.Combine(LThisFolder, LOrigName));
                    LTempFiles.Add(TPath.Combine(LThisFolder, LOrigName));

                    // محاسبه اندازه فایل به KB
                    LFileSizeKB := Ceil(TFile.GetSize(LTempFiles[LTempFiles.Count - 1]) / 1024);

                    // تلاش برای خواندن عرض/ارتفاع (اگر سرور امکان بارگذاری VCL دارد)
                    Try
                        LBitmap := TBitmap.Create;
                        Try
                            LBitmap.LoadFromFile(LTempFiles[LTempFiles.Count - 1]);
                            LWidth := LBitmap.Width;
                            LHeight := LBitmap.Height;
                        Finally
                            FreeAndNil(LBitmap);
                        End;
                    Except
                        // اگر نتوانستیم ابعاد را بفهمیم، صفر می‌گذاریم
                        LWidth := 0;
                        LHeight := 0;
                    End;

                    // درج رکورد در customer_assign_image_phone
                    LQuery.Connection := LConn;
                    LQuery.SQL.Text :=
                        'INSERT INTO customer_assign_image_phone (ImageGuid, UploadDate, FileSizeKB, ContentType, OriginalFileName, Width, Height) ' +
                        'VALUES (:g, :ud, :fs, :ct, :on, :w, :h)';

                    LQuery.ParamByName('g').AsString := LGUIDFolder;
                    LQuery.ParamByName('ud').AsDateTime := Now;
                    LQuery.ParamByName('fs').AsInteger := LFileSizeKB;
                    LQuery.ParamByName('ct').AsString := LContentType;
                    LQuery.ParamByName('on').AsString := LOrigName;
                    LQuery.ParamByName('w').AsInteger := LWidth;
                    LQuery.ParamByName('h').AsInteger := LHeight;

                    LQuery.ExecSQL;

                    // گرفتن ID آخرین درج (MySQL)
                    LImagePhoneID := GetLastInsertID;
                    LUploadedIDs.Add(LImagePhoneID);

                Finally
                    FreeAndNil(LMem);
                End;
            End;

            // خواندن BranchID ها
            LQuery.SQL.Text := 'SELECT BranchID FROM branch_branch ORDER BY BranchID';
            LQuery.Open;
            Try
                While Not LQuery.Eof Do
                Begin
                    LBranchIDs.Add(LQuery.FieldByName('BranchID').AsLargeInt);
                    LQuery.Next;
                End;
            Finally
                LQuery.Close;
            End;

            If LBranchIDs.Count = 0 Then
                Raise Exception.Create('هیچ شاخه‌ای برای تخصیص یافت نشد');

            LAssignQuery := TFDQuery.Create(Nil);
            Try
                LAssignQuery.Connection := LConn;

                Var sb: TStringBuilder;
                sb := TStringBuilder.Create;
                Try
                    For j := 0 To LBranchIDs.Count - 1 Do
                    Begin
                        If j > 0 Then
                            sb.Append(', ');
                        sb.Append(LBranchIDs[j].ToString);
                    End;

                    LAssignQuery.SQL.Text := Format(
                        'SELECT AssignmentID, BranchID FROM customer_assignment WHERE BranchID IN (%s) AND ImagePhoneID IS NULL ORDER BY BranchID, AssignmentID',
                        [sb.ToString]
                    );
                Finally
                    sb.Free;
                End;

                LAssignQuery.Open;

                Var BranchMap: TDictionary<Int64, TList<Int64>>;
                BranchMap := TDictionary<Int64, TList<Int64>>.Create;
                Try
                    For j := 0 To LBranchIDs.Count - 1 Do
                        BranchMap.Add(LBranchIDs[j], TList<Int64>.Create);

                    While Not LAssignQuery.Eof Do
                    Begin
                        Var AID := LAssignQuery.FieldByName('AssignmentID').AsLargeInt;
                        Var BID := LAssignQuery.FieldByName('BranchID').AsLargeInt;
                        If BranchMap.ContainsKey(BID) Then
                            BranchMap[BID].Add(AID);
                        LAssignQuery.Next;
                    End;

                    LAssignQuery.Close;

                    // round-robin تخصیص
                    For j := 0 To LUploadedIDs.Count - 1 Do
                    Begin
                        Var ImageID := LUploadedIDs[j];
                        Var targetBranchIdx := j Mod LBranchIDs.Count;
                        Var targetBranchID := LBranchIDs[targetBranchIdx];
                        Var assigned := False;

                        If BranchMap.ContainsKey(targetBranchID) And (BranchMap[targetBranchID].Count > 0) Then
                        Begin
                            Var assignID := BranchMap[targetBranchID][0];
                            BranchMap[targetBranchID].Delete(0);

                            LQuery.SQL.Text := 'UPDATE customer_assignment SET ImagePhoneID = :img WHERE AssignmentID = :aid';
                            LQuery.ParamByName('img').AsLargeInt := ImageID;
                            LQuery.ParamByName('aid').AsLargeInt := assignID;
                            LQuery.ExecSQL;

                            assigned := True;
                        End
                        Else
                        Begin
                            Var found := False;
                            For k := 0 To LBranchIDs.Count - 1 Do
                            Begin
                                Var bID := LBranchIDs[k];
                                If BranchMap.ContainsKey(bID) And (BranchMap[bID].Count > 0) Then
                                Begin
                                    Var aID2 := BranchMap[bID][0];
                                    BranchMap[bID].Delete(0);

                                    LQuery.SQL.Text := 'UPDATE customer_assignment SET ImagePhoneID = :img WHERE AssignmentID = :aid';
                                    LQuery.ParamByName('img').AsLargeInt := ImageID;
                                    LQuery.ParamByName('aid').AsLargeInt := aID2;
                                    LQuery.ExecSQL;

                                    found := True;
                                    Break;
                                End;
                            End;
                            If found Then
                                assigned := True;
                        End;

                        If Not assigned Then
                        Begin
                            LQuery.SQL.Text := 'INSERT INTO customer_assign_image_phone_branch (ImagePhoneID, BranchID) VALUES (:img, :br)';
                            LQuery.ParamByName('img').AsLargeInt := ImageID;
                            LQuery.ParamByName('br').AsLargeInt := targetBranchID;
                            LQuery.ExecSQL;
                        End;
                    End;

                    For k := 0 To LBranchIDs.Count - 1 Do
                        If BranchMap.ContainsKey(LBranchIDs[k]) Then
                            BranchMap[LBranchIDs[k]].Free;
                    BranchMap.Free;

                Finally
                    // end BranchMap try
                End;

            Finally
                FreeAndNil(LAssignQuery);
            End;

            // Commit تراکنش
            LConn.Commit;
            Result := True;

        Except
            On E: Exception Do
            Begin
                // rollback و پاکسازی فایل‌های محلی
                Try
                    If Assigned(LConn) And LConn.InTransaction Then
                        LConn.Rollback;
                Except
                End;

                Try
                    For i := 0 To LTempFiles.Count - 1 Do
                        If TFile.Exists(LTempFiles[i]) Then
                            TFile.Delete(LTempFiles[i]);
                    If TDirectory.Exists(LThisFolder) Then
                        TDirectory.Delete(LThisFolder, True);
                Except
                End;

                // بالا بردن خطا برای لاگ یا پاسخ مناسب در controller
                Raise;
            End;
        End;
    Finally
        LTempFiles.Free;
        LUploadedIDs.Free;
        LBranchIDs.Free;
        FreeAndNil(LQuery);
    End;
End;

//________________________________________________________________________________________

End.

