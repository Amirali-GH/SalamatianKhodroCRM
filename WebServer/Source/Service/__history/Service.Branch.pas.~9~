Unit Service.Branch;

Interface

Uses
    System.Generics.Collections,
    MVCFramework.Container,
    Model.Branch,
    Service.Interfaces,
    WebModule.SalamtCRM;

Type
    TBranchService = Class(TInterfacedObject, IBranchService)
    Public
        Function GetAll: TObjectList<TBranch>;
        Function GetInfo(Const AID: Integer): TBranchInfo;
        Function GetByID(const AID: Integer): TBranch;
        Function CreateBranch(ABranch: TBranch): TBranch;
        Function UpdateBranch(ABranch: TBranch): TBranch;
        Procedure DeleteBranch(const AID: Integer);
    End;


implementation

uses
  MVCFramework.ActiveRecord,
  System.SysUtils,
  System.NetEncoding;

{ TBranchService }

//________________________________________________________________________________________
Function TBranchService.GetAll: TObjectList<TBranch>;
Begin
    Result := TMVCActiveRecord.All<TBranch>;
End;
//________________________________________________________________________________________
Function TBranchService.GetByID(Const AID: Integer): TBranch;
Begin
    Result := TMVCActiveRecord.GetByPK<TBranch>(AID, True);
End;
//________________________________________________________________________________________
Function TBranchService.GetInfo(Const AID: Integer): TBranchInfo;
Begin
    Result := TBranchInfo(TMVCActiveRecord.GetByPK<TBranch>(AID, True));
End;
//________________________________________________________________________________________
Function TBranchService.CreateBranch(ABranch: TBranch): TBranch;
Var
    LSaltBytes: TBytes;
    LPasswordWithSalt: TBytes;
Begin
    ABranch.isActive := True;
    ABranch.Insert;
    Result := ABranch;
End;
//________________________________________________________________________________________
Function TBranchService.UpdateBranch(ABranch: TBranch): TBranch;
Var
    LExistingBranch: TBranch;
Begin
    LExistingBranch := TMVCActiveRecord.GetByPK<TBranch>(ABranch.BranchID);
    Try
        if ABranch.MainName.IsEmpty then
          ABranch.BranchName := LExistingBranch.BranchName;

        If not ABranch.SecondName.HasValue then
          ABranch.FirstName := LExistingBranch.FirstName;

        If ABranch.Code then
          ABranch.LastName := LExistingBranch.LastName;

        If not ABranch.LocationID.HasValue then
          ABranch.LocationID := LExistingBranch.LocationID;

        If not ABranch.Phone.HasValue then
          ABranch.Phone := LExistingBranch.Phone;

        If not ABranch.BranchRoleID.HasValue then
          ABranch.BranchRoleID := LExistingBranch.BranchRoleID;

        If not ABranch.BranchID.HasValue then
          ABranch.BranchID := LExistingBranch.BranchID;

        If not ABranch.IsActive.HasValue then
          ABranch.IsActive := LExistingBranch.IsActive;

        If not ABranch.Description.HasValue then
          ABranch.Description := LExistingBranch.Description;

        If ABranch.PasswordHash.IsEmpty then
          ABranch.PasswordHash := LExistingBranch.PasswordHash;

        If ABranch.Salt.IsEmpty then
          ABranch.Salt := LExistingBranch.Salt;

        If ABranch.LastLogin.HasValue then
          ABranch.LastLogin := LExistingBranch.LastLogin;

        ABranch.Update;
        Result := ABranch;
    Finally
        LExistingBranch.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TBranchService.DeleteBranch(Const AID: Integer);
Var
    LBranch: TBranch;
Begin
    LBranch := TMVCActiveRecord.GetByPK<TBranch>(AID, True);
    Try
        If Assigned(LBranch) then
        Begin
            LBranch.isActive := False;
            LBranch.Update;
        End;
    Finally
        LBranch.Free;
    End;
End;
//________________________________________________________________________________________

End.

