Unit Controller.Car.Car;

Interface

Uses
    System.SysUtils,
    System.Classes,
    System.Generics.Collections,
    MVCFramework,
    MVCFramework.Commons,
    MVCFramework.ActiveRecord,
    MVCFramework.Nullables,
    Service.Interfaces,
    Model.Car.Car,
    WebModule.SalamtCRM;

Type
    [MVCPath(BASE_API_V1 + '/car')]
    TCarController = Class(TMVCController)
    Public
        [MVCPath('')]
        [MVCHTTPMethods([httpGET])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure GetAllCars(Const [MVCInject] ACarService: ICarService);

        [MVCPath('/($ACarID)')]
        [MVCHTTPMethods([httpGET])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure GetCarByID(Const ACarID: String;
          Const [MVCInject] ACarService: ICarService);

        [MVCPath('')]
        [MVCHTTPMethods([httpPOST])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure CreateCar(Const [MVCInject] ACarService: ICarService);

        [MVCPath('/($ACarID)')]
        [MVCHTTPMethods([httpPUT])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure UpdateCar(Const ACarID: String;
          Const [MVCInject] ACarService: ICarService);

        [MVCPath('/($ACarID)')]
        [MVCHTTPMethods([httpDELETE])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure DeleteCar(Const ACarID: String;
          Const [MVCInject] ACarService: ICarService);
    End;

Implementation

Uses
    MVCFramework.Serializer.Commons,
    System.JSON, FireDAC.Stan.Error;

{ TCarController }

//________________________________________________________________________________________
Procedure TCarController.GetAllCars(Const ACarService: ICarService);
Var
    LCarList: TObjectList<TCar_Car>;
    LEqualIndex: Integer;
    LPageArrayData: TArray<string>;
    LCurrPage, LPageData, Key, Value: String;
    LMetaJSON, LPageJSON: TJSONObject;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        Try
            LCurrPage := Context.Request.Params['page'];
            LCarList := ACarService.GetAllCars(LCurrPage, True);
            If Assigned(LCarList) then
            Begin
                LPageJSON := TJSONObject.Create;
                Try
                    LPageArrayData := GetPaginationData(LCurrPage.ToInteger,
                                                        LCarList.Count,
                                                        PAGE_SIZE,
                                                        BASE_API_V1 + '/car?page=($page)')
                                                      .ToString.Split([';']);
                    For LPageData in LPageArrayData do
                    Begin
                        LEqualIndex := LPageData.IndexOf('=');
                        If (LEqualIndex > 0) then
                        Begin
                            Key := LPageData.Substring(0, LEqualIndex).Trim;
                            Value := LPageData.Substring(LEqualIndex + 1).Trim;
                            LPageJSON.AddPair(Key, Value);
                        End;
                    End;

                    LMetaJSON.AddPair('data_type', 'list<model_car_car>');
                    LMetaJSON.AddPair('count', LCarList.Count);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('description', 'لیست تمام خودروهای ثبت شده');

                    Render(HTTP_STATUS.OK,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LCarList),
                              Procedure(Const Obj: TObject; Const Links: IMVCLinks)
                              Begin
                                  Links.AddRefLink
                                        .Add(HATEOAS._TYPE, TMVCMediaType.APPLICATION_JSON)
                                        .Add(HATEOAS.HREF, Format(BASE_API_V1 + '/branch/%d', [TCar_Car(Obj).CarID]))
                                        .Add(HATEOAS.REL, 'self');
                              End)
                    );
                Finally
                    LCarList.Free;
                End;
            End
            Else
            Begin
                Raise Exception.Create('هنگام خواندن خودروهای ثبت شده خطایی رخ داده است!');
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'list<model_car_car>');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(HTTP_STATUS.InternalServerError,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TList.Create)
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TCarController.GetCarByID(Const ACarID: String;
  Const ACarService: ICarService);
Var
    LStatusCode, LCarID: Integer;
    LCar: TCar_Car;
    LMetaJSON: TJSONObject;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            If (ACarID.IsEmpty) OR (Not TryStrToInt(ACarID, LCarID)) Then
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('شناسه خودرو نامعتبر است!');
            End;

            LCar := ACarService.GetCarByID(LCarID);
            If Assigned(LCar) Then
            Begin
                Try
                    LStatusCode := HTTP_STATUS.OK;

                    LMetaJSON.AddPair('data_type', 'model_car_car');
                    LMetaJSON.AddPair('count', 1);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('description', Format('خودرو با کد %s یافت شد.', [LCar.Code.ValueOrDefault]));

                    Render(LStatusCode,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LCar)
                    );
                Finally
                    LCar.Free;
                End;
            End
            Else
            Begin
                LStatusCode := HTTP_STATUS.Forbidden;
                Raise EMVCException.Create('خودرو یافت نشد');
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'model_car_car');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TCarController.CreateCar(Const ACarService: ICarService);
Var
    LCarInput: TCar_Car;
    LCreated: TCar_Car;
    LMetaJSON: TJSONObject;
    LStatusCode: Integer;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            LCarInput := Context.Request.BodyAs<TCar_Car>;
            If Not Assigned(LCarInput) Then
            Begin
                LStatusCode := HTTP_STATUS.BadRequest;
                Raise EMVCException.Create('داده ورودی نامعتبر است');
            End;

            Try
                LCreated := Nil;
                Try
                    LCreated := ACarService.CreateCar(LCarInput);
                Except
                    On E: EFDException do
                    Begin
                        If Assigned(LCreated) then
                        Begin
                            LCreated.Free;
                        End;

                        If Pos('duplicate', E.Message.ToLower) > 0 then
                        Begin
                            Raise EMVCException.Create('کد خودرو تکراری است');
                        End
                        Else
                        Begin
                            Raise EMVCException.Create('خطای پایگاه داده: ' + E.Message);
                        End;
                    End;

                    On E: Exception do
                    Begin
                        Raise EMVCException.Create(E.Message);
                    End;
                End;
                Try
                    LStatusCode := HTTP_STATUS.Created;

                    LMetaJSON.AddPair('data_type', 'model_car_car');
                    LMetaJSON.AddPair('count', 1);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('url', BASE_API_V1 + '/car/' + LCreated.CarID.ToString);
                    LMetaJSON.AddPair('description', 'خودرو با موفقیت ذخیره شد.');

                    Render(LStatusCode,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LCreated)
                    );
                Finally
                    LCreated.Free;
                End;
            Finally
                LCarInput.Free;
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'model_car_car');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TCarController.UpdateCar(Const ACarID: String;
  Const ACarService: ICarService);
Var
    LCarID: Integer;
    LCarInput: TCar_Car;
    LUpdated: TCar_Car;
    LMetaJSON: TJSONObject;
    LStatusCode: Integer;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            If (ACarID.IsEmpty) OR (Not TryStrToInt(ACarID, LCarID)) Then
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('شناسه خودرو نامعتبر است!');
            End;

            LCarInput := Context.Request.BodyAs<TCar_Car>;
            If Not Assigned(LCarInput) Then
            Begin
                LStatusCode := HTTP_STATUS.BadRequest;
                Raise EMVCException.Create('داده ورودی نامعتبر است');
            End;

            Try
                LUpdated := ACarService.UpdateCarPartial(LCarID, LCarInput);
                If Not Assigned(LUpdated) Then
                Begin
                    LStatusCode := HTTP_STATUS.NotFound;
                    Raise EMVCException.Create('خودرو یافت نشد');
                End;

                Try
                    LStatusCode := HTTP_STATUS.OK;

                    LMetaJSON.AddPair('data_type', 'model_car_car');
                    LMetaJSON.AddPair('count', 1);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('description', 'خودرو با موفقیت بروزرسانی شد.');

                    Render(LStatusCode,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LUpdated)
                    );
                Finally
                    LUpdated.Free;
                End;
            Finally
                LCarInput.Free;
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'model_car_car');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TCarController.DeleteCar(Const ACarID: String;
  Const ACarService: ICarService);
Var
    LStatusCode, LCarID: Integer;
    LMetaJSON: TJSONObject;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            If (ACarID.IsEmpty) OR (Not TryStrToInt(ACarID, LCarID)) Then
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('شناسه خودرو نامعتبر است!');
            End;

            If ACarService.DeleteCar(LCarID) Then
            Begin
                LStatusCode := HTTP_STATUS.OK;

                LMetaJSON.AddPair('data_type', 'integer');
                LMetaJSON.AddPair('count', 1);
                LMetaJSON.AddPair('is_success', True);
                LMetaJSON.AddPair('description', 'خودرو با موفقیت حذف شد.');

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', StrToJSONObject(TJSONObject.Create(TJSONPair.Create('carid', LCarID)).ToString))
                );
            End
            Else
            Begin
                Raise EMVCException.Create('خودرو مورد نظر یافت نشد!');
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'integer');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________

End.
