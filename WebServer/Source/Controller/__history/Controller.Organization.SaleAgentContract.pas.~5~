Unit Controller.Organization.SaleAgentContract;

Interface

Uses
    System.SysUtils,
    System.Classes,
    System.Generics.Collections,
    MVCFramework,
    MVCFramework.Commons,
    MVCFramework.ActiveRecord,
    MVCFramework.Swagger.Commons,
    MVCFramework.Nullables,
    Service.Interfaces,
    Model.Organization.SaleAgentContract,
    WebModule.SalamtCRM;

Type
    [MVCPath(BASE_API_V1 + '/saleagentcontract')]
    TSaleAgentContractController = Class(TMVCController)
    Public

        [MVCPath('')]
        [MVCHTTPMethods([httpGET])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure GetAllSaleAgentContracts(Const [MVCInject] ASaleAgentContractService: ISaleAgentContractService);

        [MVCPath('/($AContractID)')]
        [MVCHTTPMethods([httpGET])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure GetSaleAgentContractByID(Const AContractID: String;
          Const [MVCInject] ASaleAgentContractService: ISaleAgentContractService);

        [MVCPath('')]
        [MVCHTTPMethods([httpPOST])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure CreateSaleAgentContract(Const [MVCInject] ASaleAgentContractService: ISaleAgentContractService);

        [MVCPath('/($AContractID)')]
        [MVCHTTPMethods([httpPUT])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure UpdateSaleAgentContract(Const AContractID: String;
          Const [MVCInject] ASaleAgentContractService: ISaleAgentContractService);

        [MVCPath('/($AContractID)')]
        [MVCHTTPMethods([httpDELETE])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure DeleteSaleAgentContract(Const AContractID: String;
          Const [MVCInject] ASaleAgentContractService: ISaleAgentContractService);
    End;

Implementation

Uses
    MVCFramework.Serializer.Commons,
    System.JSON, FireDAC.Stan.Error;

{ TSaleAgentContractController }

//________________________________________________________________________________________
Procedure TSaleAgentContractController.GetAllSaleAgentContracts(
  Const ASaleAgentContractService: ISaleAgentContractService);
Var
    LContractList: TObjectList<TOrganization_SaleAgentContract>;
    LEqualIndex: Integer;
    LPageArrayData: TArray<string>;
    LCurrPage, LPageData, Key, Value, LStatus, LContext: String;
    LMetaJSON, LPageJSON: TJSONObject;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        Try
            LCurrPage := Context.Request.Params['page'];
            LStatus := Context.Request.Params['status'];
            LContext := Context.Request.Params['context'];
            LContractList := ASaleAgentContractService.GetAllContracts(LCurrPage, LStatus, LContext);
            If Assigned(LContractList) then
            Begin
                LPageJSON := TJSONObject.Create;
                Try
                    LPageArrayData := GetPaginationData(LCurrPage.ToInteger,
                                                        LContractList.Count,
                                                        PAGE_SIZE,
                                                        BASE_API_V1 + '/saleagentcontract?page=($page)')
                                                      .ToString.Split([';']);
                    For LPageData in LPageArrayData do
                    Begin
                        LEqualIndex := LPageData.IndexOf('=');
                        If (LEqualIndex > 0) then
                        Begin
                            Key := LPageData.Substring(0, LEqualIndex).Trim;
                            Value := LPageData.Substring(LEqualIndex + 1).Trim;
                            LPageJSON.AddPair(Key, Value);
                        End;
                    End;

                    LMetaJSON.AddPair('page', LPageJSON);
                    LMetaJSON.AddPair('data_type', 'list<model_organization_saleagentcontract>');
                    LMetaJSON.AddPair('count', LContractList.Count);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('description', 'لیست تمام قراردادهای نماینده فروش');

                    Render(HTTP_STATUS.OK,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LContractList,
                              Procedure(Const Obj: TObject; Const Links: IMVCLinks)
                              Begin
                                  Links.AddRefLink
                                        .Add(HATEOAS._TYPE, TMVCMediaType.APPLICATION_JSON)
                                        .Add(HATEOAS.HREF, Format(BASE_API_V1 + '/saleagentcontract/%d', [TOrganization_SaleAgentContract(Obj).ContractID]))
                                        .Add(HATEOAS.REL, 'self');
                              End)
                    );
                Finally
                    LContractList.Free;
                End;
            End
            Else
            Begin
                Raise Exception.Create('هنگام خواندن قراردادهای نماینده فروش خطایی رخ داده است!');
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'list<model_organization_saleagentcontract>');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(HTTP_STATUS.InternalServerError,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TList.Create)
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TSaleAgentContractController.GetSaleAgentContractByID(
  Const AContractID: String; Const ASaleAgentContractService: ISaleAgentContractService);
Var
    LStatusCode, LID: Integer;
    LContract: TOrganization_SaleAgentContract;
    LMetaJSON: TJSONObject;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            If (AContractID.IsEmpty) OR (Not TryStrToInt(AContractID, LID)) Then
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('شناسه قرارداد نامعتبر است!');
            End;

            LContract := ASaleAgentContractService.GetContractByID(LID);
            If Assigned(LContract) Then
            Begin
                Try
                    LStatusCode := HTTP_STATUS.OK;

                    LMetaJSON.AddPair('data_type', 'model_organization_saleagentcontract');
                    LMetaJSON.AddPair('count', 1);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('description',
                        Format('قرارداد نماینده فروش با کد %s یافت شد.', [LContract.Code]));

                    Render(LStatusCode,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LContract)
                    );
                Finally
                    LContract.Free;
                End;
            End
            Else
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('قرارداد نماینده فروش یافت نشد');
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'model_organization_saleagentcontract');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TSaleAgentContractController.CreateSaleAgentContract(
  Const ASaleAgentContractService: ISaleAgentContractService);
Var
    LInput: TOrganization_SaleAgentContract;
    LCreated: TOrganization_SaleAgentContract;
    LMetaJSON: TJSONObject;
    LStatusCode: Integer;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            LInput := Context.Request.BodyAs<TOrganization_SaleAgentContract>;
            If Not Assigned(LInput) Then
            Begin
                LStatusCode := HTTP_STATUS.BadRequest;
                Raise EMVCException.Create('داده ورودی نامعتبر است');
            End;

            Try
                LCreated := Nil;
                Try
                    LCreated := ASaleAgentContractService.CreateContract(LInput);
                Except
                    On E: EFDException do
                    Begin
                        If Assigned(LCreated) then
                            LCreated.Free;

                        If Pos('duplicate', E.Message.ToLower) > 0 then
                        Begin
                            LStatusCode := HTTP_STATUS.Conflict;
                            Raise EMVCException.Create('کد قرارداد تکراری است')
                        End
                        Else
                        Begin
                            Raise EMVCException.Create('خطای پایگاه داده: ' + E.Message);
                        End;
                    End;

                    On E: Exception do
                        Raise EMVCException.Create(E.Message);
                End;
                Try
                    LStatusCode := HTTP_STATUS.Created;

                    LMetaJSON.AddPair('data_type', 'model_organization_saleagentcontract');
                    LMetaJSON.AddPair('count', 1);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('url',
                        BASE_API_V1 + '/saleagentcontract/' + LCreated.ContractID.ToString);
                    LMetaJSON.AddPair('description', 'قرارداد نماینده فروش با موفقیت ذخیره شد.');

                    Render(LStatusCode,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LCreated)
                    );
                Finally
                    LCreated.Free;
                End;
            Finally
                LInput.Free;
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'model_organization_saleagentcontract');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TSaleAgentContractController.UpdateSaleAgentContract(Const AContractID: String;
  Const ASaleAgentContractService: ISaleAgentContractService);
Var
    LID: Integer;
    LInput: TOrganization_SaleAgentContract;
    LUpdated: TOrganization_SaleAgentContract;
    LMetaJSON: TJSONObject;
    LStatusCode: Integer;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            If (AContractID.IsEmpty) OR (Not TryStrToInt(AContractID, LID)) Then
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('شناسه قرارداد نامعتبر است!');
            End;

            LInput := Context.Request.BodyAs<TOrganization_SaleAgentContract>;
            If Not Assigned(LInput) Then
            Begin
                LStatusCode := HTTP_STATUS.BadRequest;
                Raise EMVCException.Create('داده ورودی نامعتبر است');
            End;

            Try
                Try
                    LUpdated := ASaleAgentContractService.UpdateContractPartial(LID, LInput);
                Except
                    On E: EFDException do
                    Begin
                        If Pos('duplicate', E.Message.ToLower) > 0 then
                        Begin
                            LStatusCode := HTTP_STATUS.Conflict;
                            Raise EMVCException.Create('کد قرارداد تکراری است')
                        End
                        Else
                        Begin
                            Raise EMVCException.Create('خطای پایگاه داده: ' + E.Message);
                        End;
                    End;

                    On E: Exception do
                        Raise EMVCException.Create(E.Message);
                End;

                If Not Assigned(LUpdated) Then
                Begin
                    LStatusCode := HTTP_STATUS.NotFound;
                    Raise EMVCException.Create('قرارداد یافت نشد');
                End;

                Try
                    LStatusCode := HTTP_STATUS.OK;

                    LMetaJSON.AddPair('data_type', 'model_organization_saleagentcontract');
                    LMetaJSON.AddPair('count', 1);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('description', 'قرارداد نماینده فروش با موفقیت بروزرسانی شد.');

                    Render(LStatusCode,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LUpdated)
                    );
                Finally
                    LUpdated.Free;
                End;
            Finally
                LInput.Free;
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'model_organization_saleagentcontract');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TSaleAgentContractController.DeleteSaleAgentContract(Const AContractID: String;
  Const ASaleAgentContractService: ISaleAgentContractService);
Var
    LStatusCode, LID: Integer;
    LMetaJSON: TJSONObject;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            If (AContractID.IsEmpty) OR (Not TryStrToInt(AContractID, LID)) Then
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('شناسه قرارداد نامعتبر است!');
            End;

            If ASaleAgentContractService.DeleteContract(LID) Then
            Begin
                LStatusCode := HTTP_STATUS.OK;

                LMetaJSON.AddPair('data_type', 'integer');
                LMetaJSON.AddPair('count', 1);
                LMetaJSON.AddPair('is_success', True);
                LMetaJSON.AddPair('description', 'قرارداد نماینده فروش با موفقیت حذف شد.');

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data',
                        StrToJSONObject(TJSONObject.Create(TJSONPair.Create('contractid', LID)).ToString))
                );
            End
            Else
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('قرارداد مورد نظر یافت نشد!');
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'integer');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________

End.

