Unit Controller.Customer.Customer;

Interface

Uses
    System.SysUtils,
    System.Classes,
    System.Generics.Collections,
    MVCFramework,
    MVCFramework.Commons,
    MVCFramework.ActiveRecord,
    MVCFramework.Nullables,
    Service.Interfaces,
    Model.Customer.Customer,
    WebModule.SalamtCRM;

Type
    [MVCPath(BASE_API_V1 + '/customer')]
    TCustomerController = Class(TMVCController)
    Public
        [MVCPath('')]
        [MVCHTTPMethods([httpGET])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure GetAllCustomers(Const [MVCInject] ACustomerService: ICustomerService);

        [MVCPath('/($ACustomerID)')]
        [MVCHTTPMethods([httpGET])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure GetCustomerByID(Const ACustomerID: String;
          Const [MVCInject] ACustomerService: ICustomerService);

        [MVCPath('')]
        [MVCHTTPMethods([httpPOST])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure CreateCustomer(Const [MVCInject] ACustomerService: ICustomerService);

        [MVCPath('/($ACustomerID)')]
        [MVCHTTPMethods([httpPUT])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure UpdateCustomer(Const ACustomerID: String;
          Const [MVCInject] ACustomerService: ICustomerService);

        [MVCPath('/($ACustomerID)')]
        [MVCHTTPMethods([httpDELETE])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure DeleteCustomer(Const ACustomerID: String;
          Const [MVCInject] ACustomerService: ICustomerService);
    End;

Implementation

Uses
    MVCFramework.Serializer.Commons,
    System.JSON, FireDAC.Stan.Error;

{ TCustomerController }

//________________________________________________________________________________________
Procedure TCustomerController.GetAllCustomers(Const ACustomerService: ICustomerService);
Var
    LCustomerList: TObjectList<TCustomer_Customer>;
    LEqualIndex: Integer;
    LPageArrayData: TArray<String>;
    LCurrPage, LPageData, Key, Value, LStatus, LContext: String;
    LMetaJSON, LPageJSON: TJSONObject;

Begin
    LMetaJSON := TJSONObject.Create;
    Try
        Try
            LCurrPage := Context.Request.Params['page'];
            LStatus := Context.Request.Params['status'];
            LContext := Context.Request.Params['context'];
            LCustomerList := ACustomerService.GetAllCustomers(LCurrPage, LStatus, LContext);
            If Assigned(LCustomerList) then
            Begin
                LPageJSON := TJSONObject.Create;
                Try
                    LPageArrayData := GetPaginationData(lCurrPage.ToInteger,
                                                        LCustomerList.Count,
                                                        PAGE_SIZE,
                                                        BASE_API_V1 + '/customer?page=($page)')
                                                      .ToString.Split([';']);
                    For LPageData in LPageArrayData do
                    Begin
                        LEqualIndex := LPageData.IndexOf('=');
                        If (LEqualIndex > 0) then
                        Begin
                            Key := LPageData.Substring(0, LEqualIndex).Trim;
                            Value := LPageData.Substring(LEqualIndex + 1).Trim;
                            LPageJSON.AddPair(Key, Value);
                        End;
                    End;

                    LMetaJSON.AddPair('page', LPageJSON);
                    LMetaJSON.AddPair('data_type', 'list<model_customer_customer>');
                    LMetaJSON.AddPair('count', LCustomerList.Count);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('description', 'لیست تمام مشتریان ثبت شده');

                    Render(HTTP_STATUS.OK,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LCustomerList,
                              Procedure(Const Obj: TObject; Const Links: IMVCLinks)
                              Begin
                                  Links.AddRefLink
                                        .Add(HATEOAS._TYPE, TMVCMediaType.APPLICATION_JSON)
                                        .Add(HATEOAS.HREF, Format(BASE_API_V1 + '/customer/%d', [TCustomer_Customer(Obj).CustomerID]))
                                        .Add(HATEOAS.REL, 'self');
                              End)
                    );
                Finally
                    LCustomerList.Free;
                End;
            End
            Else
            Begin
                Raise Exception.Create('هنگام خواندن مشتریان ثبت شده خطایی رخ داده است!');
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'list<model_customer_customer>');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(HTTP_STATUS.InternalServerError,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TList.Create)
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TCustomerController.GetCustomerByID(Const ACustomerID: String;
  Const ACustomerService: ICustomerService);
Var
    LStatusCode: Integer;
    LCustomerID: Int64;
    LCustomer: TCustomer_Customer;
    LMetaJSON: TJSONObject;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            If (ACustomerID.IsEmpty) OR (Not TryStrToInt64(ACustomerID, LCustomerID)) Then
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('شناسه مشتری نامعتبر است!');
            End;

            LCustomer := ACustomerService.GetCustomerByID(LCustomerID);
            If Assigned(LCustomer) Then
            Begin
                Try
                    LStatusCode := HTTP_STATUS.OK;

                    LMetaJSON.AddPair('data_type', 'model_customer_customer');
                    LMetaJSON.AddPair('count', 1);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('description', Format('مشتری با ایمیل %s یافت شد.', [LCustomer.Email.Value]));

                    Render(LStatusCode,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LCustomer)
                    );
                Finally
                    LCustomer.Free;
                End;
            End
            Else
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('مشتری یافت نشد');
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'model_customer_customer');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TCustomerController.CreateCustomer(Const ACustomerService: ICustomerService);
Var
    LInput: TCustomer_Customer;
    LCreated: TCustomer_Customer;
    LMetaJSON: TJSONObject;
    LStatusCode: Integer;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            LInput := Context.Request.BodyAs<TCustomer_Customer>;
            If Not Assigned(LInput) Then
            Begin
                LStatusCode := HTTP_STATUS.BadRequest;
                Raise EMVCException.Create('داده ورودی نامعتبر است');
            End;

            Try
                LCreated := Nil;
                Try
                    LCreated := ACustomerService.CreateCustomer(LInput);
                Except
                    On E: EFDException do
                    Begin
                        If Assigned(LCreated) then
                        Begin
                            LCreated.Free;
                        End;

                        If Pos('duplicate', E.Message.ToLower) > 0 then
                        Begin
                            LStatusCode := HTTP_STATUS.Conflict;
                            Raise EMVCException.Create('ایمیل یا شماره تلفن یا کدملی مشتری تکراری است');
                        End
                        Else
                        Begin
                            Raise EMVCException.Create('خطای پایگاه داده: ' + E.Message);
                        End;
                    End;

                    On E: Exception do
                    Begin
                        Raise EMVCException.Create(E.Message);
                    End;
                End;
                Try
                    LStatusCode := HTTP_STATUS.Created;

                    LMetaJSON.AddPair('data_type', 'model_customer_customer');
                    LMetaJSON.AddPair('count', 1);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('url', BASE_API_V1 + '/customer/' + LCreated.CustomerID.ToString);
                    LMetaJSON.AddPair('description', 'مشتری با موفقیت ذخیره شد.');

                    Render(LStatusCode,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LCreated)
                    );
                Finally
                    LCreated.Free;
                End;
            Finally
                LInput.Free;
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'model_customer_customer');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TCustomerController.UpdateCustomer(Const ACustomerID: String;
  Const ACustomerService: ICustomerService);
Var
    LCustomerID: Int64;
    LInput: TCustomer_Customer;
    LUpdated: TCustomer_Customer;
    LMetaJSON: TJSONObject;
    LStatusCode: Integer;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            If (ACustomerID.IsEmpty) OR (Not TryStrToInt64(ACustomerID, LCustomerID)) Then
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('شناسه مشتری نامعتبر است!');
            End;

            LInput := Context.Request.BodyAs<TCustomer_Customer>;
            If Not Assigned(LInput) Then
            Begin
                LStatusCode := HTTP_STATUS.BadRequest;
                Raise EMVCException.Create('داده ورودی نامعتبر است');
            End;

            Try
                Try
                    LUpdated := ACustomerService.UpdateCustomerPartial(LCustomerID, LInput);
                Except
                    On E: EFDException do
                    Begin
                        If Pos('duplicate', E.Message.ToLower) > 0 then
                        Begin
                            LStatusCode := HTTP_STATUS.Conflict;
                            Raise EMVCException.Create('شماره تکراری است')
                        End
                        Else
                        Begin
                            Raise EMVCException.Create('خطای پایگاه داده: ' + E.Message);
                        End;
                    End;

                    On E: Exception do
                    Begin
                        Raise EMVCException.Create(E.Message);
                    End;
                End;

                If Not Assigned(LUpdated) Then
                Begin
                    LStatusCode := HTTP_STATUS.NotFound;
                    Raise EMVCException.Create('مشتری یافت نشد');
                End;

                Try
                    LStatusCode := HTTP_STATUS.OK;

                    LMetaJSON.AddPair('data_type', 'model_customer_customer');
                    LMetaJSON.AddPair('count', 1);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('description', 'مشتری با موفقیت بروزرسانی شد.');

                    Render(LStatusCode,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LUpdated)
                    );
                Finally
                    LUpdated.Free;
                End;
            Finally
                LInput.Free;
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'model_customer_customer');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TCustomerController.DeleteCustomer(Const ACustomerID: String;
  Const ACustomerService: ICustomerService);
Var
    LStatusCode: Integer;
    LCustomerID: Int64;
    LMetaJSON: TJSONObject;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            If (ACustomerID.IsEmpty) OR (Not TryStrToInt64(ACustomerID, LCustomerID)) Then
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('شناسه مشتری نامعتبر است!');
            End;

            If ACustomerService.DeleteCustomer(LCustomerID) Then
            Begin
                LStatusCode := HTTP_STATUS.OK;

                LMetaJSON.AddPair('data_type', 'integer');
                LMetaJSON.AddPair('count', 1);
                LMetaJSON.AddPair('is_success', True);
                LMetaJSON.AddPair('description', 'مشتری با موفقیت حذف شد.');

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', StrToJSONObject(TJSONObject.Create(TJSONPair.Create('customerid', LCustomerID)).ToString))
                );
            End
            Else
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('مشتری مورد نظر یافت نشد!');
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'integer');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________

End.
