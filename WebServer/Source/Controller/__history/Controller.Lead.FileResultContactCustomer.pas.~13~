Unit Controller.Lead.FileResultContactCustomer;

Interface

Uses
    System.SysUtils,
    System.Classes,
    System.Generics.Collections,
    MVCFramework,
    MVCFramework.Commons,
    MVCFramework.ActiveRecord,
    MVCFramework.Nullables,
    Service.Interfaces,
    Model.Lead.FileResultContactCustomer,
    WebModule.SalamtCRM;

Type
    [MVCPath(BASE_API_V1 + '/file-result')]
    TFileResultContactCustomerController = Class(TMVCController)
    Public
        [MVCPath('')]
        [MVCHTTPMethods([httpGET])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure GetAllFileResults(Const [MVCInject] AFileResultService: IFileResultContactCustomerService);

        [MVCPath('/($AFileUploadID)')]
        [MVCHTTPMethods([httpGET])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure GetFileResultByID(Const AFileUploadID: String;
          Const [MVCInject] AFileResultService: IFileResultContactCustomerService);

        [MVCPath('')]
        [MVCHTTPMethods([httpPOST])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure CreateFileResult(Const [MVCInject] AFileResultService: IFileResultContactCustomerService);

        [MVCPath('/($AFileUploadID)')]
        [MVCHTTPMethods([httpPUT])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure UpdateFileResult(Const AFileUploadID: String;
          Const [MVCInject] AFileResultService: IFileResultContactCustomerService);

        [MVCPath('/($AFileUploadID)')]
        [MVCHTTPMethods([httpDELETE])]
        [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
        [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
        Procedure DeleteFileResult(Const AFileUploadID: String;
          Const [MVCInject] AFileResultService: IFileResultContactCustomerService);
    End;

Implementation

Uses
    MVCFramework.Serializer.Commons,
    System.JSON, FireDAC.Stan.Error;

{ TFileResultContactCustomerController }

//________________________________________________________________________________________
Procedure TFileResultContactCustomerController.GetAllFileResults(Const AFileResultService: IFileResultContactCustomerService);
Var
    LFileResultList: TObjectList<TLead_FileResultContactCustomer>;
    LEqualIndex: Integer;
    LPageArrayData: TArray<string>;
    LCurrPage, LPageData, Key, Value, LStatus, LContext: String;
    LMetaJSON, LPageJSON: TJSONObject;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        Try
            LCurrPage := Context.Request.Params['page'];
            LContext := Context.Request.Params['context'];
            LFileResultList := AFileResultService.GetAllFileResults(LCurrPage, LContext);
            If Assigned(LFileResultList) then
            Begin
                LPageJSON := TJSONObject.Create;
                Try
                    LPageArrayData := GetPaginationData(lCurrPage.ToInteger,
                                                        LFileResultList.Count,
                                                        PAGE_SIZE,
                                                        BASE_API_V1 + '/file-result?page=($page)')
                                                      .ToString.Split([';']);
                    For LPageData in LPageArrayData do
                    Begin
                        LEqualIndex := LPageData.IndexOf('=');
                        If (LEqualIndex > 0) then
                        Begin
                            Key := LPageData.Substring(0, LEqualIndex).Trim;
                            Value := LPageData.Substring(LEqualIndex + 1).Trim;
                            LPageJSON.AddPair(Key, Value);
                        End;
                    End;

                    LMetaJSON.AddPair('data_type', 'list<model_lead_file_result_contact_customer>');
                    LMetaJSON.AddPair('count', LFileResultList.Count);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('description', 'لیست تمام فایل‌های آپلود شده');

                    Render(HTTP_STATUS.OK,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LFileResultList,
                              Procedure(Const Obj: TObject; Const Links: IMVCLinks)
                              Begin
                                  Links.AddRefLink
                                        .Add(HATEOAS._TYPE, TMVCMediaType.APPLICATION_JSON)
                                        .Add(HATEOAS.HREF, Format(BASE_API_V1 + '/file-result/%d', [TLead_FileResultContactCustomer(Obj).FileUploadID]))
                                        .Add(HATEOAS.REL, 'self');
                              End)
                    );
                Finally
                    LFileResultList.Free;
                End;
            End
            Else
            Begin
                Raise Exception.Create('هنگام خواندن فایل‌های آپلود شده خطایی رخ داده است!');
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'list<model_lead_file_result_contact_customer>');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(HTTP_STATUS.InternalServerError,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TList.Create)
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TFileResultContactCustomerController.GetFileResultByID(Const AFileUploadID: String;
  Const AFileResultService: IFileResultContactCustomerService);
Var
    LStatusCode: Integer;
    LFileUploadID: Int64;
    LFileResult: TLead_FileResultContactCustomer;
    LMetaJSON: TJSONObject;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            If (AFileUploadID.IsEmpty) OR (Not TryStrToInt64(AFileUploadID, LFileUploadID)) Then
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('شناسه فایل آپلود نامعتبر است!');
            End;

            LFileResult := AFileResultService.GetFileResultByID(LFileUploadID);
            If Assigned(LFileResult) Then
            Begin
                Try
                    LStatusCode := HTTP_STATUS.OK;

                    LMetaJSON.AddPair('data_type', 'model_lead_file_result_contact_customer');
                    LMetaJSON.AddPair('count', 1);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('description', Format('فایل آپلود با نام %s یافت شد.', [LFileResult.FileName]));

                    Render(LStatusCode,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LFileResult)
                    );
                Finally
                    LFileResult.Free;
                End;
            End
            Else
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('فایل آپلود یافت نشد');
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'model_lead_file_result_contact_customer');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TFileResultContactCustomerController.CreateFileResult(Const AFileResultService: IFileResultContactCustomerService);
Var
    LFileResultInput: TLead_FileResultContactCustomer;
    LCreated: TLead_FileResultContactCustomer;
    LMetaJSON: TJSONObject;
    LStatusCode: Integer;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            LFileResultInput := Context.Request.BodyAs<TLead_FileResultContactCustomer>;
            If Not Assigned(LFileResultInput) Then
            Begin
                LStatusCode := HTTP_STATUS.BadRequest;
                Raise EMVCException.Create('داده ورودی نامعتبر است');
            End;

            Try
                LCreated := Nil;
                Try
                    LCreated := AFileResultService.CreateFileResult(LFileResultInput);
                Except
                    On E: EFDException do
                    Begin
                        If Assigned(LCreated) then
                        Begin
                            LCreated.Free;
                        End;

                        If Pos('duplicate', E.Message.ToLower) > 0 then
                        Begin
                            LStatusCode := HTTP_STATUS.Conflict;
                            Raise EMVCException.Create('نام فایل تکراری است');
                        End
                        Else
                        Begin
                            Raise EMVCException.Create('خطای پایگاه داده: ' + E.Message);
                        End;
                    End;

                    On E: Exception do
                    Begin
                        Raise EMVCException.Create(E.Message);
                    End;
                End;
                Try
                    LStatusCode := HTTP_STATUS.Created;

                    LMetaJSON.AddPair('data_type', 'model_lead_file_result_contact_customer');
                    LMetaJSON.AddPair('count', 1);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('url', BASE_API_V1 + '/file-result/' + LCreated.FileUploadID.ToString);
                    LMetaJSON.AddPair('description', 'فایل با موفقیت ذخیره شد.');

                    Render(LStatusCode,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LCreated)
                    );
                Finally
                    LCreated.Free;
                End;
            Finally
                LFileResultInput.Free;
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'model_lead_file_result_contact_customer');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TFileResultContactCustomerController.UpdateFileResult(Const AFileUploadID: String;
  Const AFileResultService: IFileResultContactCustomerService);
Var
    LFileUploadID: Int64;
    LFileResultInput: TLead_FileResultContactCustomer;
    LUpdated: TLead_FileResultContactCustomer;
    LMetaJSON: TJSONObject;
    LStatusCode: Integer;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            If (AFileUploadID.IsEmpty) OR (Not TryStrToInt64(AFileUploadID, LFileUploadID)) Then
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('شناسه فایل آپلود نامعتبر است!');
            End;

            LFileResultInput := Context.Request.BodyAs<TLead_FileResultContactCustomer>;
            If Not Assigned(LFileResultInput) Then
            Begin
                LStatusCode := HTTP_STATUS.BadRequest;
                Raise EMVCException.Create('داده ورودی نامعتبر است');
            End;

            Try
                LUpdated := AFileResultService.UpdateFileResultPartial(LFileUploadID, LFileResultInput);
                If Not Assigned(LUpdated) Then
                Begin
                    LStatusCode := HTTP_STATUS.NotFound;
                    Raise EMVCException.Create('فایل آپلود یافت نشد');
                End;

                Try
                    LStatusCode := HTTP_STATUS.OK;

                    LMetaJSON.AddPair('data_type', 'model_lead_file_result_contact_customer');
                    LMetaJSON.AddPair('count', 1);
                    LMetaJSON.AddPair('is_success', True);
                    LMetaJSON.AddPair('description', 'فایل با موفقیت بروزرسانی شد.');

                    Render(LStatusCode,
                        ObjectDict(False)
                          .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                          .Add('data', LUpdated)
                    );
                Finally
                    LUpdated.Free;
                End;
            Finally
                LFileResultInput.Free;
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'model_lead_file_result_contact_customer');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________
Procedure TFileResultContactCustomerController.DeleteFileResult(Const AFileUploadID: String;
  Const AFileResultService: IFileResultContactCustomerService);
Var
    LStatusCode: Integer;
    LFileUploadID: Int64;
    LMetaJSON: TJSONObject;
Begin
    LMetaJSON := TJSONObject.Create;
    Try
        LStatusCode := HTTP_STATUS.InternalServerError;
        Try
            If (AFileUploadID.IsEmpty) OR (Not TryStrToInt64(AFileUploadID, LFileUploadID)) Then
            Begin
                LStatusCode := HTTP_STATUS.NotFound;
                Raise EMVCException.Create('شناسه فایل آپلود نامعتبر است!');
            End;

            If AFileResultService.DeleteFileResult(LFileUploadID) Then
            Begin
                LStatusCode := HTTP_STATUS.OK;

                LMetaJSON.AddPair('data_type', 'integer');
                LMetaJSON.AddPair('count', 1);
                LMetaJSON.AddPair('is_success', True);
                LMetaJSON.AddPair('description', 'فایل با موفقیت حذف شد.');

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', StrToJSONObject(TJSONObject.Create(TJSONPair.Create('fileuploadid', LFileUploadID)).ToString))
                );
            End
            Else
            Begin
                Raise EMVCException.Create('فایل مورد نظر یافت نشد!');
            End;
        Except
            On E: Exception do
            Begin
                LMetaJSON.AddPair('data_type', 'integer');
                LMetaJSON.AddPair('count', 0);
                LMetaJSON.AddPair('is_success', False);
                LMetaJSON.AddPair('description', E.Message);

                Render(LStatusCode,
                    ObjectDict(True)
                      .Add('meta', StrToJSONObject(LMetaJSON.ToString))
                      .Add('data', TMVCObjectDictionary.Create())
                );
            End;
        End;
    Finally
        LMetaJSON.Free;
    End;
End;
//________________________________________________________________________________________

End.
